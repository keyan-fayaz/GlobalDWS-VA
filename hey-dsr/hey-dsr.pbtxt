node {
  name: "net_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 29
        }
        dim {
          size: 13
        }
      }
    }
  }
}
node {
  name: "net/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\r\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "net/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.2866911
      }
    }
  }
}
node {
  name: "net/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2866911
      }
    }
  }
}
node {
  name: "net/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "net/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 3315605
    }
  }
}
node {
  name: "net/random_uniform/sub"
  op: "Sub"
  input: "net/random_uniform/max"
  input: "net/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/random_uniform/mul"
  op: "Mul"
  input: "net/random_uniform/RandomUniform"
  input: "net/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/random_uniform"
  op: "Add"
  input: "net/random_uniform/mul"
  input: "net/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 13
        }
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "net/kernel/Assign"
  op: "Assign"
  input: "net/kernel"
  input: "net/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "net/kernel/read"
  op: "Identity"
  input: "net/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/kernel"
      }
    }
  }
}
node {
  name: "net/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 60
          }
        }
        tensor_content: "qZ\030=\rvS=\260\231\241\274[0\221\276\322F*\276>z6\276E\251\034\276U[\373\274\326\212f\275q,\210=6&\226;\243\343\223\272x\262\020>-\302\370<\317\356}=\260\316\"=<\0306>\233\320\200>\272\0134>rOs\275\350\']\276\251/\017>Z\254\273=<K\235=\213\303\000\271A\231r\276g\366\225=\356\3635>;\360\000\276\022\274W\276\177d\264\275\245\323\016\275\312 :=\322\307\217=V\330\306\275\026\247\372<V\343 \275\311\346\373\275e\242_\276X5x\275\021\257\307=\221V\014\275l\023V=}\310t\274\257\251+=\312\310\376\273\347\366<\276\303\016B\276\257\326\227\275\255\3418>\330\327\227=\017\037\256\276W\215\304\274O6\177;\250\372\367\275\000a\324=\267\307\210\273\327}\356\273\354]\206>\211\024\224\274\221\246\234\276\267k\212\275\\\030i=U\3763\276\324\272\354<\377\301\246\274\330\341z\275\267\004\027>\254\027(\2744\251t>\032=5>\256~\232\274C\326,=s\226\275\273\275(\336=\231\214)\276\033k[=\364%\243=\207%\016\275\340\301_\276:@ >\264\322\200=\364\237+\2763B\351=\026%\236\275],Z=\240\310\360\275\240\346\324<\t\310\211=\370\233Y>\2558l\276\255\246\235\275\330\211\016\276\331\037\313\275E\003\226=\215\234\325\275Z\372s\275y\005@\275\333\3105\276lHv<\000Z%\275\222\306F\275\255F\020>\027T\202>\305\301\034\275\312\027\307=v\312\037>z\333\225\273w\320^\276\3003\000\276\036|\204\2750S\363\275\305)J\274\342\242N>\350\335g>\330\247S\276\007:\004\275\220\225,\272\276\357T<\277C(\276|\376\234\275@\027\302>\373\3643\276o\312\243\274w\270\n\2759\2733>\022\320\014<yoG\276\375\365\341=\364\221\014=t\333\250\275\251\224\\=\201\rT>\'\267\376=\017\177\273\275\212\364\"\2768\311\014\276\315)\005\276Y\327 \276\024\003\346\275\313\365v<qw\354\273\360f/\275/\t\016>\250*\223\275,\341\217\275\247\223\006\276\016z0>\300\230+=\344\371\245\275^\261S\275P\237\016=,`\227\274f\206\343\274\254YE\276Q\232^=E-P\276\331\034`\2756W\004>\014\264\365\275\214\304k\276-3\n\276\206+V>\027Q\266\275\321CT=\225\277Y>\255\371\323=\347\242\034>8u&\276\216G\277=c\315\037>\370\026O=\335U\254\275\243,f\275\206&5\276~\270\037\275\225\233\352\275\355\246a\274\245\317G<\277\0072>\331}[=\257\036\206\275\343o\275<yt\207=_\354\204=\3578\214\275r\037\203>\263i\214\275\032\271N>\234X\303=#DZ\276\350\355+>R\315\334=\344\357b\275?\216\025>a\021T>\323\335E\276\016>`>n\366\315\275\3242\025=\316\007<>=_\263\275\014\3576\271\325\212\033\274\003W3\276\342\314\005\275\240\231=\275\303\2511\276\310\010 \276\323RR\276\316\231\034\276\213\330\326=\373\324K\275V\323\314=-)\222=W\014\205\276D\007\003\276\345\310\226\275\231\0064\276W\237]>aYd>0|e\276\010\213\251=T\250\210=\250\250\267\275\033\205\223\275\330\371\003>\006M\t<#W\220;H\273\030\274\3136J>\227\250\221=\234\036\327=\242\312\233\275\263\307\224\272dlY<D]@\275o\304E<cj\215=9\372\302=}`M\275q\003\212\2769\247\013\276\256N\201>\351\207\375=\022\253\035\276\335\331\010\274\203-n>\306\344\252=\354\3058=\217\344\332;\203\203o\274\340\205Q=\274]:=c4\362\272}\224->\262\237\\\275A\201\316\275m\352\341\275F\252\027>VGb\276X\374p=\260m(\276SI:\274\223V8=\364vS=\023H\024\276\333\002f>\322F\237=\2528\270\275{\342\036\275\032\217.\276\014B\\>&\311\375=,NR\276\204\326u=\007\334\347\275\213!\264<\217%.>\211\223\023>\251<\330=\\\313\217=L\002\032>-h>\275\374\r,=L.R>\036\327\322=\202,\266=+&\305=\200of\276\237\024\344;x\277;\276\247\334\242=;\334\023>\006\302\370;\016\374\257<\006\232\341:t\'&\275\273\352\177>\260\347\373;N\342\036>b\223\260\275(\306-<\342N\302\275$\302\203=]\227\315\275\243(V\274\373B\001>(,\335=\t\205O\275\323;\037\276\343\317\036>Z\007\240\275E\326\377;\210{d=MC\333=\263\222\246\275\213\314r=\250\313\257\2756\214\265=\2473\336<;Fs\276\001\273\\=\210\'\255=\214C\227\275\261O\210\275\320\036l=*\003\316=\026{\355\274\353\036\340=caS\275G\3302>R_\205\276\235\363\275<8\2659>\307\013c>\025\362\330\275\323j5>5d\355=\203\\\205\276t\270\341\275W\310\317=\376\266\342=\016,\367\274\241\202r>J\353\014>\345\272\002\275z-\325\275G\003\243\274S\3236=\342\276\325;!\\\010\276\013\245\266=Z?\311=\024P\201>F\\\037>d\200\\\276\374N\255>\305i\233\274ha\350;6\200\370:\371\277\302\275-\256\266\276A \000\276R)\034\276\010\366\207>\216\357\352=\343\262\244<\006\t\304\275\244\214\370\274v\250\311\275\336\256\346=\010g\222<h\276\251=\303\207\204\274\222q}\275(\260\346=>\013\361\274:m(=\301x\344=/\025\221;\272\211\353\275\347\357\214>\331\303\366\275 )A\275=\036\000\275-\177\223\275\351\273\234=\242\201\265\275pe\212\274\222\010G\274\353\241u\274\312\237z=}n\241>\337ql>k\300h\274\221\345r\274\335\234$\275g:\201=\333\257a;\264\347X\275z \261\275\333*\237>\235\251\247=\2658:>/I\001\276$\330\306\275PU{\273\231\200\266=\003I\026\276\314\217\335\275\231g\370<\330!\3709k*\322<\207O\335<\303\006[\276b\214\255<\3669n\276\244\375\016\275l\323\200\276\300\336\376\274\317Y}\275\2516\347\274\335x\247\273\304\234\007\276\362o\177=\016\010\277\275\351\2764>t\213H>!OH>B2\n=\254\352\246\276-\223\306<@\006;\2765\3114>v\267\370\275\236\3263\275\213d<\276\331\351k\275e\207\027>\233\203E>mp\032<\353O\264=\031\272f>\233@ \276)M\031\275pM\\\275\002\332\200=\255\362\253\275n\352C=D\230^\276S\230\032=\265FI<RK >Et\031\276\303\345(\275\220:\261=\371\325\007\2760\245d\275\007\033\334\275C\030\270\275\025\005\236=\341\'?\276\034\354\001\276\007\3014>\225w\034\276\367\215R\275\264R\263=\"\250V>L\316\275\274U\321V>\rg\235<t\323\t>\233\261\367\274;\212\034\276\364.\241=\234\277\t>\310\000\014>\337\276\261\275\032(\026\276\232r\024<\276\300t=4\300u=\221J\205\274\211\311M=\375\212~\274t\020k\275%={>\016\314K>*\264\276\275\261n\030\275\013\023F\274\327\341\234=\240\247a\276_7\035>\360\2327=BI\221\275\3343\274=[(\372=\202/V\276\254\\\347<\341;\n>Hn\256=\207\313T=\301\300\252\275\016m\002\276\273\310\204=\271J\344=\211\227\272=+\245G\276\2412\243=\264\360G\276d\t\227\276\265\257\030>qq\212\275\224)\004=\371]\241\275eH\354\275\237HQ>\237\201\'=\226\331G\276\207w\377=\205\220t\275 2\277<\033C\322\275\231\221\016\276\234c\3519\007\354F\275\330!P<\3033\233\275\263^j\276\200\323_>\310\364\002=I\366,\275Eg\000>\242\265\305=\350\201G\276\030\216\257\276\260\0361<\320\216\256=\r>d=\371\344v\275\027\021\204=\231\377a\275\274\202\375\275\374>\222\274\037e\314\275\236\234g\276CS\336\275p\271A=\201\246n\275\242\013\021>\345\334\366=\020\370\261\275P1\314=\026\232t<\002\213\312=\313t\204\275\222\241C\276r\237\206\275\020L\037=i5k\276~v\215\275\212\205\036>C\341\207>\324\033+\2765\217\013\275\257\212o=\363\260\360\275M\000Y\274\n\334\327<\365\353,\276K\240\315\275J\014\350=\016\004\315\275d\303x;}\202\"\275_\"\212>J\3146=\253\rL>\271\215\032=\361\027>>\361\232O\276\270\321+=FS\361\275\213j\366\275\3520A\275D\275\305=\247\032\277<~g\203\275\375`S\274:.\013<Q\024\264=\202\367\262=\263\276T\2766(\250\2764\374\232\276\212w\375=\331\303\222\273\373\305\311\275\006\220t> >0=\314\251\221\275\262\016\013\275*$Q\276sqg\276\257A\340=h\367\031\276\032\345\025>\244\323G=\242\225X>\337\351\311\275\313\245\264=\216\203\241=\230PW\276\022Q\021\275c\306\216\275\021\243[>pQ\213\275\335\243\365\275,l\354\2749\343d=\213!\364\273\202D\262=\252\262g=(\307\377=]i\376\275i\274\272=\\\321E\276\201\260[=\272r\352=}\365\213<G\246\241\275\320Ab\275\233@e\275?\025_\2748\324\366<`\304l\2755\344\222>\"P\240=\272\310\254=\251\2405\275!\023W\275\005\350\014\276\272\3119<\3709y<\353\312\302\273\347\305\034\275u\377\364\275q@\006\276(\0237=u1\352\275\253\352\232>\222\315I\276\275\317}>J\312O\275?\312\326=z#\240\2758Sg\276\034\206Y\276\022\013k\276\361e\241\275\274!\203=\211o_\276\002A\'>\232\340\003=\031`D>\204\205\000\275e#\211\274\313\0335\276\367\305\005>\335s\345;\0308\340\274c\275\220>f\205\023=<\024\202=\037v7\276\230\205\203\276\337\324;>R9\250\275\335\277\212\275\344+\216=\317\n\316<.i,>\221\226\244\275\223\305A>\333\356\300\2754\024[\274\264\321u\276t\364\017\276\302a\270=\'-\310\275\374\202\337<b\351\t\275\305+C=Q\264\001=*\325\014\276o\320A>\357f\204\275\370\231\201\274/i]\276\204y\002\276B\177\364\275\264\253\372<y$\325<\371\177\214\276f\260?=\245\243\276\275\035W:=\370\206\375\275\\e`\275&\230>\276\360\024b>\205\206%\275\202\345\340\275si\206=8\267\003\275\330O\237=Ga\241<\025c\260=\220\232\202>\371\251 >9\2058\276\264\211)</\003,>B|\010>-\301\236=\036\222\361=\23555\276H\342\014>\227#\321\274\254V\006\276\020\220\300\275r\007\266\274\374\267\026>*\231\274=&\2407\274\023x\004=\245\371+>\0309$\276\016\355\265\274\nM\216\275\324&\315\275\\\\S\275\007k!=\200\027}\276\217?\263=-hZ\275\254\307k\275\255\t\372=\010\007\014\276\244\3455\273i\364=\276(\301\242\276xN\035\275\272q\002\275\240\350K=\252\2462>!a\220=\227|\207>]\3772\276\321E\334\275Xh\024>\276tU\276\333\3326=M8\223\274\006\373\303=MQ-=\332~X>\363\010\201=\330=\032\275\325\325\375\275\327n)>\373h`=P\017\234\275?nl\275\020\253;>\370\252x\275\251|\343=\301\217\344\274s\225*=\027\266\206\276\324\206\234\275n\261T\273\037\272\035\276\236\317\275\274g&\250\275\031\312#\275\241\314s\276\017\264?>c<\204=\361_o\274j\244\252\275\233\314\032\275\372\364\214=\231J\013\275\010\004\345\275Y\374\217=\006\270\001>Wm\271=J\214\272=i\265S>\3268G\274+\275\247\275G\035\276\275\005\002\213=\263\237\254\275\366}0\274B\177E\274AV\323;[\230\376\275\334\321$;\343\215(\276\341\206S\273\024h\020\2767\275\034>r\336\036\276\005X\246=\372}9=\337\302#\275\302I\277=\371\342\204=\345\373\200>\030A\217\275R\234\326\275\206\325r=N:P;mo\224\276I\320\230\274E\007\020\276\365w%\276\257@ >y|\330\274\2537\221\276\337\224\203\276\\\325\313\275\357B/;\004\3614>\007W=\276\3618\204>\036\277\270=t\352\251=]\335D\275*\2023=.\023\341=E\206}\274\307\262\375\275\206\377W=\3432\247=A\021j\276\265\201\243=\027/\252\275\177\022 >{@\014>H\276q\274\313\327\024\276y\020\026\275\351\227_>*\357\252\276\275\267C=\027\355L=.0\307=\001\264\n>\307\3561\276\374\2150\276\252\221T\275H@\r=\344N\270=\300h\272<\220\361\206=\223\177\241\275\034\206\261=\206\004\030>\326\235\221\275\315\302\010>\2165\315\275\364\365A>^\373K\275n\026T\276\327)K>zi\007\276)\363\340=\372\210\221\274+\365\305\275Q\350\303;2\372\313\272KX\200=\254d\235\274\305\353\371<\001\320-\276L\341\244\276_z>\276HT\245=X\237}\274e\230[\276-\302\207<\354+z\276\304\367\277=\325\342\346\275 #\276=\376\326-=\361\352\255\275lm(=N\315\001\274\n\342\027>\272\300H\276S\234\347\275i\360\325\275T\214k\2752}\307\275(\001\240\276\237\323\027>SY\177\276\0236\303<j\003\266\275T\230\262<\254W\034>}W\'\276\\2\302<\243\331\022\276\010\363V>\231\365\217=[\321\216\274\250\002W\275\365Xo\276\372\026\007\276\217\367\346\275\0365\323\275R\003\265\274\323\025?=\252D.\275\302M\277\275\031\310X>W9s:A75\276w]3\274\233\346\220=\371\2104\276\332Z\034\275\024Z\343\273A\364b\276\355\375\276=j\255\312=\222\232\224\276\2136\371\275\\p\253\275\203\3713\276\006\"\244\275\364W\001\276\376\241\325\2752\2145>\201e\200\2752Z\304=\304\013\303<\267\311C>\r\302:\276\\G\311\274\365\334\303\274\013\370!\275?\274\240<\223\324@>\363\275\217=\311\277\326=!\241\224\275lp9=g\234\213\276\336(\252\275\346\227]>\303\364|\276a\224P\275\353\362\230=\375\303 =Ea/>\267\3536\276\255%\365=\216\362\314\275r\211\211\275\363\341K\276T\372+=7\215\004\275-\337\256<V U\276\n\250\373=\264\027F\2765\214\007\274\030\330\020>\020\216e\275\037, >$\245U\276\320?\343\275`\370\350\274\023\316\205>\215e\337<\210W\233:\260i\240=\313\353\303<}\231e\275\226!\223\275\250\031*=\205\270\013\2761R9=gl\211<\'\372\313\275\240`\351\274\200\036%\275]5\026\275\256\234j>\3776\315=\214\253/\275\243\3233\275\304\256\247=\035j\014\276\245\244\356\275\363\240\217=\360\001\033:D\344\205\276\006\223\003>\252\006=\276M\326X\275=\014t>\2209\271;]j\240\275N\330\327\275\016\204\027\276\340\204N>s0\234\275\242\252\215>c\031\021\275\313Zw;\341f\363\275a\201O\275\202\362Z\274\020\241\335\274]\363\202\275m\261\000>^o\270\275\250\030\001\276\2009E=\242P\355<\373f\305\274Fw\206=7\271h>\360%\207\276\221j[\275\205\224\321=\024Lc=\013\036_\2759\356\207=\3338#\276\306N7>\306\367\355\275\347\341\256=Xz \275Ld(>\001_\322\274\000\035a\276\036\204/>i`\320\275F?\274>|\3747\275\214^\205=\027\331W\275&zM\275\221\322\234\274\267\312\347<x\026Z\275\017\221\225\2766\242g=Rm\211\275\204\221\033>\220H\347\275:B\247\275\277\275\213\276e\343(>\004|\036\276\3175\266:\204;\247\275M\023\247=\376\233\221\272\235\223\005=\307\004\004\276\236J\235\274\022\211F=\265\351\272\273\334l\247<\264z\366\275\275\237(\274\020I\036\276\344\320\333=\345\025\225\275\000E\275=\272m\224\274\246\024\357\273Eb7>:\374\243<\252\030\345=\005\2340>l\242\243=\014\213\342\275\303%\207:\276h\345\275F]\260=\235Q\330<\255\343\324<\017\031,\276\n\204\224\276I\376\200=_\377\324<e\341\210=\365\215?=\rD\316=D\207\231\275\333B\203\276\342\332\254=\222\201M\274\223\332;\276\266\377\347\275\361\306\027>2\324\\\273|\322L\276\310\332\023>Yy\312\272\206\032\201=\350C@\276\336\2012=\357\036;\276E\266\316=\227\317\206>o*:>8\2143\276gI\347\274|\236\202\275\"\200\216\276\246\264u=\325\212\216=.b\315\275\354b\224>\351HZ=\374\3754\276\023\220\032>B\321\226>\365\333\245=P\023\035=\006\267\310=T\333H>7\317\r=\332#\357\275\316\256\035>\376^\264<k\342\364\273i\037X=\000\257\361=\366)B>\373O%>s=\026=\275\335->\205\000\304=\243\347\037\274\030q\027\276\014\004[\275\327\362B>\232D\276\274\023WP\275\242\253A=\372}\237=k\\x>\235,\242;\216h\'\276\036R\361\275\355\325\266\274Fp\323=\261B\021\276\262\311\327\275&I\002\275\357\254_\276\307\225\371\274k\000\247\2752\232\346\274\361\233\227\275\222C\244\275r\307\252\2756f\342<n\214\003>~\340\313=\000T\270=W$x\275\261\3406\275]Pz\276:\026>=\272\320\300\275D{\264=\007\314\251\275\206f\274\276\254\037\207\274\'\314&\276qC\326=\177\264u=%.T\275G\217\357\275\036\306\231\276"
      }
    }
  }
}
node {
  name: "net/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "net/recurrent_kernel/Assign"
  op: "Assign"
  input: "net/recurrent_kernel"
  input: "net/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "net/recurrent_kernel/read"
  op: "Identity"
  input: "net/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/recurrent_kernel"
      }
    }
  }
}
node {
  name: "net/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "net/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "net/bias/Assign"
  op: "Assign"
  input: "net/bias"
  input: "net/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "net/bias/read"
  op: "Identity"
  input: "net/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/bias"
      }
    }
  }
}
node {
  name: "net/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice"
  op: "StridedSlice"
  input: "net/kernel/read"
  input: "net/strided_slice/stack"
  input: "net/strided_slice/stack_1"
  input: "net/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_1"
  op: "StridedSlice"
  input: "net/recurrent_kernel/read"
  input: "net/strided_slice_1/stack"
  input: "net/strided_slice_1/stack_1"
  input: "net/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_2"
  op: "StridedSlice"
  input: "net/kernel/read"
  input: "net/strided_slice_2/stack"
  input: "net/strided_slice_2/stack_1"
  input: "net/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_3"
  op: "StridedSlice"
  input: "net/recurrent_kernel/read"
  input: "net/strided_slice_3/stack"
  input: "net/strided_slice_3/stack_1"
  input: "net/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_4"
  op: "StridedSlice"
  input: "net/kernel/read"
  input: "net/strided_slice_4/stack"
  input: "net/strided_slice_4/stack_1"
  input: "net/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "net/strided_slice_5"
  op: "StridedSlice"
  input: "net/recurrent_kernel/read"
  input: "net/strided_slice_5/stack"
  input: "net/strided_slice_5/stack_1"
  input: "net/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "net/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_6"
  op: "StridedSlice"
  input: "net/bias/read"
  input: "net/strided_slice_6/stack"
  input: "net/strided_slice_6/stack_1"
  input: "net/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 20
      }
    }
  }
}
node {
  name: "net/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "net/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_7"
  op: "StridedSlice"
  input: "net/bias/read"
  input: "net/strided_slice_7/stack"
  input: "net/strided_slice_7/stack_1"
  input: "net/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 40
      }
    }
  }
}
node {
  name: "net/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_8"
  op: "StridedSlice"
  input: "net/bias/read"
  input: "net/strided_slice_8/stack"
  input: "net/strided_slice_8/stack_1"
  input: "net/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "net/zeros_like"
  op: "ZerosLike"
  input: "net_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "net/Sum"
  op: "Sum"
  input: "net/zeros_like"
  input: "net/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "net/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "net/ExpandDims"
  op: "ExpandDims"
  input: "net/Sum"
  input: "net/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "net/Tile"
  op: "Tile"
  input: "net/ExpandDims"
  input: "net/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "net/transpose"
  op: "Transpose"
  input: "net_input"
  input: "net/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/Shape"
  op: "Shape"
  input: "net/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_9"
  op: "StridedSlice"
  input: "net/Shape"
  input: "net/strided_slice_9/stack"
  input: "net/strided_slice_9/stack_1"
  input: "net/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "net/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_10"
  op: "StridedSlice"
  input: "net/transpose"
  input: "net/strided_slice_10/stack"
  input: "net/strided_slice_10/stack_1"
  input: "net/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "net/Shape_1"
  op: "Shape"
  input: "net/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "net/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_11"
  op: "StridedSlice"
  input: "net/Shape_1"
  input: "net/strided_slice_11/stack"
  input: "net/strided_slice_11/stack_1"
  input: "net/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "net/Shape_2"
  op: "Shape"
  input: "net/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/strided_slice_12"
  op: "StridedSlice"
  input: "net/Shape_2"
  input: "net/strided_slice_12/stack"
  input: "net/strided_slice_12/stack_1"
  input: "net/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "net/ones/mul"
  op: "Mul"
  input: "net/strided_slice_12"
  input: "net/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/ones/Less/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1000
      }
    }
  }
}
node {
  name: "net/ones/Less"
  op: "Less"
  input: "net/ones/mul"
  input: "net/ones/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/ones/packed"
  op: "Pack"
  input: "net/strided_slice_12"
  input: "net/strided_slice_11"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "net/ones/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/ones"
  op: "Fill"
  input: "net/ones/packed"
  input: "net/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/mul"
  op: "Mul"
  input: "net/strided_slice_10"
  input: "net/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/mul_1"
  op: "Mul"
  input: "net/strided_slice_10"
  input: "net/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/mul_2"
  op: "Mul"
  input: "net/strided_slice_10"
  input: "net/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/MatMul"
  op: "MatMul"
  input: "net/mul"
  input: "net/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/MatMul_1"
  op: "MatMul"
  input: "net/mul_1"
  input: "net/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/MatMul_2"
  op: "MatMul"
  input: "net/mul_2"
  input: "net/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/BiasAdd"
  op: "BiasAdd"
  input: "net/MatMul"
  input: "net/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "net/BiasAdd_1"
  op: "BiasAdd"
  input: "net/MatMul_1"
  input: "net/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "net/BiasAdd_2"
  op: "BiasAdd"
  input: "net/MatMul_2"
  input: "net/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "net/MatMul_3"
  op: "MatMul"
  input: "net/Tile"
  input: "net/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/MatMul_4"
  op: "MatMul"
  input: "net/Tile"
  input: "net/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/add"
  op: "Add"
  input: "net/BiasAdd"
  input: "net/MatMul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "net/mul_3"
  op: "Mul"
  input: "net/mul_3/x"
  input: "net/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "net/add_1"
  op: "Add"
  input: "net/mul_3"
  input: "net/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "net/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/clip_by_value/Minimum"
  op: "Minimum"
  input: "net/add_1"
  input: "net/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/clip_by_value"
  op: "Maximum"
  input: "net/clip_by_value/Minimum"
  input: "net/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/add_2"
  op: "Add"
  input: "net/BiasAdd_1"
  input: "net/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/mul_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "net/mul_4"
  op: "Mul"
  input: "net/mul_4/x"
  input: "net/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "net/add_3"
  op: "Add"
  input: "net/mul_4"
  input: "net/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "net/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "net/add_3"
  input: "net/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/clip_by_value_1"
  op: "Maximum"
  input: "net/clip_by_value_1/Minimum"
  input: "net/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/mul_5"
  op: "Mul"
  input: "net/clip_by_value_1"
  input: "net/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/MatMul_5"
  op: "MatMul"
  input: "net/mul_5"
  input: "net/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/add_4"
  op: "Add"
  input: "net/BiasAdd_2"
  input: "net/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/mul_6"
  op: "Mul"
  input: "net/clip_by_value"
  input: "net/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/sub"
  op: "Sub"
  input: "net/sub/x"
  input: "net/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/mul_7"
  op: "Mul"
  input: "net/sub"
  input: "net/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/add_5"
  op: "Add"
  input: "net/mul_6"
  input: "net/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/TensorArray"
  op: "TensorArrayV3"
  input: "net/strided_slice_9"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "net/TensorArray_1"
  op: "TensorArrayV3"
  input: "net/strided_slice_9"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "net/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "net/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "net/TensorArrayUnstack/Shape"
  input: "net/TensorArrayUnstack/strided_slice/stack"
  input: "net/TensorArrayUnstack/strided_slice/stack_1"
  input: "net/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "net/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/TensorArrayUnstack/range"
  op: "Range"
  input: "net/TensorArrayUnstack/range/start"
  input: "net/TensorArrayUnstack/strided_slice"
  input: "net/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "net/TensorArray_1"
  input: "net/TensorArrayUnstack/range"
  input: "net/transpose"
  input: "net/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/transpose"
      }
    }
  }
}
node {
  name: "net/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/while/Enter"
  op: "Enter"
  input: "net/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/Enter_1"
  op: "Enter"
  input: "net/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/Enter_2"
  op: "Enter"
  input: "net/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/Merge"
  op: "Merge"
  input: "net/while/Enter"
  input: "net/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/Merge_1"
  op: "Merge"
  input: "net/while/Enter_1"
  input: "net/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Merge_2"
  op: "Merge"
  input: "net/while/Enter_2"
  input: "net/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Less"
  op: "Less"
  input: "net/while/Merge"
  input: "net/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/Less/Enter"
  op: "Enter"
  input: "net/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/LoopCond"
  op: "LoopCond"
  input: "net/while/Less"
}
node {
  name: "net/while/Switch"
  op: "Switch"
  input: "net/while/Merge"
  input: "net/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge"
      }
    }
  }
}
node {
  name: "net/while/Switch_1"
  op: "Switch"
  input: "net/while/Merge_1"
  input: "net/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_1"
      }
    }
  }
}
node {
  name: "net/while/Switch_2"
  op: "Switch"
  input: "net/while/Merge_2"
  input: "net/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_2"
      }
    }
  }
}
node {
  name: "net/while/Identity"
  op: "Identity"
  input: "net/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/Identity_1"
  op: "Identity"
  input: "net/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Identity_2"
  op: "Identity"
  input: "net/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "net/while/TensorArrayReadV3/Enter"
  input: "net/while/Identity"
  input: "net/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "net/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "net/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/mul"
  op: "Mul"
  input: "net/while/TensorArrayReadV3"
  input: "net/while/mul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/mul/Enter"
  op: "Enter"
  input: "net/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/mul_1"
  op: "Mul"
  input: "net/while/TensorArrayReadV3"
  input: "net/while/mul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/mul_2"
  op: "Mul"
  input: "net/while/TensorArrayReadV3"
  input: "net/while/mul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/MatMul"
  op: "MatMul"
  input: "net/while/mul"
  input: "net/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/while/MatMul/Enter"
  op: "Enter"
  input: "net/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/MatMul_1"
  op: "MatMul"
  input: "net/while/mul_1"
  input: "net/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/while/MatMul_1/Enter"
  op: "Enter"
  input: "net/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/MatMul_2"
  op: "MatMul"
  input: "net/while/mul_2"
  input: "net/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/while/MatMul_2/Enter"
  op: "Enter"
  input: "net/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/BiasAdd"
  op: "BiasAdd"
  input: "net/while/MatMul"
  input: "net/while/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "net/while/BiasAdd/Enter"
  op: "Enter"
  input: "net/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/BiasAdd_1"
  op: "BiasAdd"
  input: "net/while/MatMul_1"
  input: "net/while/BiasAdd_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "net/while/BiasAdd_1/Enter"
  op: "Enter"
  input: "net/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/BiasAdd_2"
  op: "BiasAdd"
  input: "net/while/MatMul_2"
  input: "net/while/BiasAdd_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "net/while/BiasAdd_2/Enter"
  op: "Enter"
  input: "net/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/MatMul_3"
  op: "MatMul"
  input: "net/while/Identity_2"
  input: "net/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/while/MatMul_3/Enter"
  op: "Enter"
  input: "net/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/MatMul_4"
  op: "MatMul"
  input: "net/while/Identity_2"
  input: "net/while/MatMul_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/while/MatMul_4/Enter"
  op: "Enter"
  input: "net/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/add"
  op: "Add"
  input: "net/while/BiasAdd"
  input: "net/while/MatMul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/mul_3/x"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "net/while/mul_3"
  op: "Mul"
  input: "net/while/mul_3/x"
  input: "net/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/add_1/y"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "net/while/add_1"
  op: "Add"
  input: "net/while/mul_3"
  input: "net/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Const"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "net/while/Const_1"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "net/while/add_1"
  input: "net/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/clip_by_value"
  op: "Maximum"
  input: "net/while/clip_by_value/Minimum"
  input: "net/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/add_2"
  op: "Add"
  input: "net/while/BiasAdd_1"
  input: "net/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/mul_4/x"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "net/while/mul_4"
  op: "Mul"
  input: "net/while/mul_4/x"
  input: "net/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/add_3/y"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "net/while/add_3"
  op: "Add"
  input: "net/while/mul_4"
  input: "net/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Const_2"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "net/while/Const_3"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "net/while/add_3"
  input: "net/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/clip_by_value_1"
  op: "Maximum"
  input: "net/while/clip_by_value_1/Minimum"
  input: "net/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/mul_5"
  op: "Mul"
  input: "net/while/clip_by_value_1"
  input: "net/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/MatMul_5"
  op: "MatMul"
  input: "net/while/mul_5"
  input: "net/while/MatMul_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "net/while/MatMul_5/Enter"
  op: "Enter"
  input: "net/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/add_4"
  op: "Add"
  input: "net/while/BiasAdd_2"
  input: "net/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/mul_6"
  op: "Mul"
  input: "net/while/clip_by_value"
  input: "net/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/sub/x"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "net/while/sub"
  op: "Sub"
  input: "net/while/sub/x"
  input: "net/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/mul_7"
  op: "Mul"
  input: "net/while/sub"
  input: "net/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/add_5"
  op: "Add"
  input: "net/while/mul_6"
  input: "net/while/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "net/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "net/while/Identity"
  input: "net/while/add_5"
  input: "net/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
}
node {
  name: "net/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "net/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "net/while/add_6/y"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/while/add_6"
  op: "Add"
  input: "net/while/Identity"
  input: "net/while/add_6/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/NextIteration"
  op: "NextIteration"
  input: "net/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/NextIteration_1"
  op: "NextIteration"
  input: "net/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/NextIteration_2"
  op: "NextIteration"
  input: "net/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Exit"
  op: "Exit"
  input: "net/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/while/Exit_1"
  op: "Exit"
  input: "net/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/while/Exit_2"
  op: "Exit"
  input: "net/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "net/TensorArray"
  input: "net/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArray"
      }
    }
  }
}
node {
  name: "net/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "net/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/TensorArrayStack/range"
  op: "Range"
  input: "net/TensorArrayStack/range/start"
  input: "net/TensorArrayStack/TensorArraySizeV3"
  input: "net/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArray"
      }
    }
  }
}
node {
  name: "net/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "net/TensorArray"
  input: "net/TensorArrayStack/range"
  input: "net/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 20
        }
      }
    }
  }
}
node {
  name: "net/sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "net/sub_1"
  op: "Sub"
  input: "net/while/Exit"
  input: "net/sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "net/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "net/TensorArray"
  input: "net/sub_1"
  input: "net/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "net/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "net/transpose_1"
  op: "Transpose"
  input: "net/TensorArrayStack/TensorArrayGatherV3"
  input: "net/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5345225
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5345225
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 4657770
    }
  }
}
node {
  name: "dense_1/random_uniform/sub"
  op: "Sub"
  input: "dense_1/random_uniform/max"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform/mul"
  op: "Mul"
  input: "dense_1/random_uniform/RandomUniform"
  input: "dense_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform"
  op: "Add"
  input: "dense_1/random_uniform/mul"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "net/TensorArrayReadV3"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/Sigmoid"
  op: "Sigmoid"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 13
        }
        dim {
          size: 60
        }
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "net/kernel"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 60
        }
      }
    }
  }
}
node {
  name: "Assign_1"
  op: "Assign"
  input: "net/recurrent_kernel"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
}
node {
  name: "Assign_2"
  op: "Assign"
  input: "net/bias"
  input: "Placeholder_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_3"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_3"
  op: "Assign"
  input: "dense_1/kernel"
  input: "Placeholder_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_4"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_4"
  op: "Assign"
  input: "dense_1/bias"
  input: "Placeholder_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "net/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "net/recurrent_kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/recurrent_kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "net/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dense_1/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dense_1/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dense_1/bias/Assign"
  input: "^dense_1/kernel/Assign"
  input: "^net/bias/Assign"
  input: "^net/kernel/Assign"
  input: "^net/recurrent_kernel/Assign"
}
node {
  name: "RMSprop/lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.001
      }
    }
  }
}
node {
  name: "RMSprop/lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/lr/Assign"
  op: "Assign"
  input: "RMSprop/lr"
  input: "RMSprop/lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/lr/read"
  op: "Identity"
  input: "RMSprop/lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
}
node {
  name: "RMSprop/rho/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9
      }
    }
  }
}
node {
  name: "RMSprop/rho"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/rho/Assign"
  op: "Assign"
  input: "RMSprop/rho"
  input: "RMSprop/rho/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/rho/read"
  op: "Identity"
  input: "RMSprop/rho"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
}
node {
  name: "RMSprop/decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "RMSprop/decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/decay/Assign"
  op: "Assign"
  input: "RMSprop/decay"
  input: "RMSprop/decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/decay/read"
  op: "Identity"
  input: "RMSprop/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
}
node {
  name: "RMSprop/iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "RMSprop/iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "RMSprop/iterations/Assign"
  op: "Assign"
  input: "RMSprop/iterations"
  input: "RMSprop/iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "RMSprop/iterations/read"
  op: "Identity"
  input: "RMSprop/iterations"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
}
node {
  name: "dense_1_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "dense_1_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/add/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/add"
  op: "Add"
  input: "loss/dense_1_loss/add/x"
  input: "dense_1_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Neg"
  op: "Neg"
  input: "loss/dense_1_loss/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/add_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/add_1"
  op: "Add"
  input: "loss/dense_1_loss/add_1/x"
  input: "dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/add_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/add_2"
  op: "Add"
  input: "loss/dense_1_loss/add_1"
  input: "loss/dense_1_loss/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Log"
  op: "Log"
  input: "loss/dense_1_loss/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/mul"
  op: "Mul"
  input: "loss/dense_1_loss/Neg"
  input: "loss/dense_1_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/sub"
  op: "Sub"
  input: "loss/dense_1_loss/sub/x"
  input: "dense_1_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Neg_1"
  op: "Neg"
  input: "loss/dense_1_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/sub_1"
  op: "Sub"
  input: "loss/dense_1_loss/sub_1/x"
  input: "dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/add_3"
  op: "Add"
  input: "loss/dense_1_loss/sub_1"
  input: "loss/dense_1_loss/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Log_1"
  op: "Log"
  input: "loss/dense_1_loss/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/mul_1"
  op: "Mul"
  input: "loss/dense_1_loss/Neg_1"
  input: "loss/dense_1_loss/Log_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean"
  op: "Mean"
  input: "loss/dense_1_loss/mul_1"
  input: "loss/dense_1_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_1_loss/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/mul_2"
  op: "Mul"
  input: "loss/dense_1_loss/mul_2/x"
  input: "loss/dense_1_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean_1"
  op: "Mean"
  input: "loss/dense_1_loss/mul"
  input: "loss/dense_1_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_1_loss/mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/mul_3"
  op: "Mul"
  input: "loss/dense_1_loss/mul_3/x"
  input: "loss/dense_1_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/add_4"
  op: "Add"
  input: "loss/dense_1_loss/mul_2"
  input: "loss/dense_1_loss/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean_2/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean_2"
  op: "Mean"
  input: "loss/dense_1_loss/add_4"
  input: "loss/dense_1_loss/Mean_2/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_1_loss/mul_4"
  op: "Mul"
  input: "loss/dense_1_loss/Mean_2"
  input: "dense_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/NotEqual"
  op: "NotEqual"
  input: "dense_1_sample_weights"
  input: "loss/dense_1_loss/NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Cast"
  op: "Cast"
  input: "loss/dense_1_loss/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_1_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean_3"
  op: "Mean"
  input: "loss/dense_1_loss/Cast"
  input: "loss/dense_1_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/dense_1_loss/truediv"
  op: "RealDiv"
  input: "loss/dense_1_loss/mul_4"
  input: "loss/dense_1_loss/Mean_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/dense_1_loss/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/dense_1_loss/Mean_4"
  op: "Mean"
  input: "loss/dense_1_loss/truediv"
  input: "loss/dense_1_loss/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/mul"
  op: "Mul"
  input: "loss/mul/x"
  input: "loss/dense_1_loss/Mean_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/Round"
  op: "Round"
  input: "dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/Equal"
  op: "Equal"
  input: "dense_1_target"
  input: "metrics/acc/Round"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "metrics/acc/Cast"
  op: "Cast"
  input: "metrics/acc/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/acc/Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "metrics/acc/Mean"
  op: "Mean"
  input: "metrics/acc/Cast"
  input: "metrics/acc/Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "metrics/acc/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "metrics/acc/Mean_1"
  op: "Mean"
  input: "metrics/acc/Mean"
  input: "metrics/acc/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Fill"
  op: "Fill"
  input: "training/RMSprop/gradients/Shape"
  input: "training/RMSprop/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/f_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/f_count_1"
  op: "Enter"
  input: "training/RMSprop/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/Merge"
  op: "Merge"
  input: "training/RMSprop/gradients/f_count_1"
  input: "training/RMSprop/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/Merge"
  input: "net/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Add/y"
  op: "Const"
  input: "^net/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Add"
  op: "Add"
  input: "training/RMSprop/gradients/Switch:1"
  input: "training/RMSprop/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/Add"
  input: "^training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_3_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_4_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^training/RMSprop/gradients/net/while/mul_7_grad/Mul/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/StackPushV2"
  input: "^training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/f_count_2"
  op: "Exit"
  input: "training/RMSprop/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/b_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/b_count_1"
  op: "Enter"
  input: "training/RMSprop/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/Merge_1"
  op: "Merge"
  input: "training/RMSprop/gradients/b_count_1"
  input: "training/RMSprop/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "training/RMSprop/gradients/Merge_1"
  input: "training/RMSprop/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/b_count_2"
  op: "LoopCond"
  input: "training/RMSprop/gradients/GreaterEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Switch_1"
  op: "Switch"
  input: "training/RMSprop/gradients/Merge_1"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/Sub"
  op: "Sub"
  input: "training/RMSprop/gradients/Switch_1:1"
  input: "training/RMSprop/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/NextIteration_1"
  op: "NextIteration"
  input: "training/RMSprop/gradients/Sub"
  input: "^training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/b_count_3"
  op: "Exit"
  input: "training/RMSprop/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/mul_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/Fill"
  input: "loss/dense_1_loss/Mean_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/mul_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/Fill"
  input: "loss/mul/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/mul_grad/Mul_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Tile"
  op: "Tile"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_1_loss/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Prod"
  op: "Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Shape_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Prod_1"
  op: "Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Shape_2"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Maximum"
  op: "Maximum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Prod_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/floordiv"
  op: "FloorDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Cast"
  op: "Cast"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/truediv"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Tile"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Shape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/truediv"
  input: "loss/dense_1_loss/Mean_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/RealDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Neg"
  op: "Neg"
  input: "loss/dense_1_loss/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Neg"
  input: "loss/dense_1_loss/Mean_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/RealDiv_1"
  input: "loss/dense_1_loss/Mean_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_4_grad/truediv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/truediv"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Shape_1"
  op: "Shape"
  input: "dense_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Shape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Reshape"
  input: "dense_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Mul_1"
  op: "Mul"
  input: "loss/dense_1_loss/Mean_2"
  input: "training/RMSprop/gradients/loss/dense_1_loss/truediv_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Mul_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_4_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Tile"
  op: "Tile"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/truediv"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Tile"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_2_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/truediv"
  input: "loss/dense_1_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_2_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/truediv"
  input: "loss/dense_1_loss/mul_2/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_3_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/truediv"
  input: "loss/dense_1_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_3_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_2_grad/truediv"
  input: "loss/dense_1_loss/mul_3/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_2_grad/Mul_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Tile"
  op: "Tile"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_1_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Prod"
  op: "Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Shape_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Prod_1"
  op: "Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Shape_2"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Maximum"
  op: "Maximum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Prod_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Cast"
  op: "Cast"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Tile"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_3_grad/Mul_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Tile"
  op: "Tile"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_1_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Prod"
  op: "Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Shape_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Prod_1"
  op: "Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Shape_2"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Maximum"
  op: "Maximum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Prod_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/floordiv"
  op: "FloorDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Prod"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Cast"
  op: "Cast"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/truediv"
  op: "RealDiv"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Tile"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Mean_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/Neg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_1_loss/Log_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Shape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/truediv"
  input: "loss/dense_1_loss/Log_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Mul_1"
  op: "Mul"
  input: "loss/dense_1_loss/Neg_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Mul_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "loss/dense_1_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Shape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/truediv"
  input: "loss/dense_1_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "loss/dense_1_loss/Neg"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Mean_1_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Mul_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/mul"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Log_1_grad/Reciprocal"
  op: "Reciprocal"
  input: "loss/dense_1_loss/add_3"
  input: "^training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Log_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Log_1_grad/mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_1_grad/Reshape_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Log_1_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Log_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "loss/dense_1_loss/add_2"
  input: "^training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Log"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/Log_grad/mul"
  op: "Mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/mul_grad/Reshape_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/Log"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Shape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Log_1_grad/mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Log_1_grad/mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Shape"
  op: "Shape"
  input: "loss/dense_1_loss/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Shape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Log_grad/mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/Log_grad/mul"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Shape_1"
  op: "Shape"
  input: "dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Shape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_3_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Neg"
  op: "Neg"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Neg"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Shape_1"
  op: "Shape"
  input: "dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Shape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_2_grad/Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Sum_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN"
  op: "AddN"
  input: "training/RMSprop/gradients/loss/dense_1_loss/sub_1_grad/Reshape_1"
  input: "training/RMSprop/gradients/loss/dense_1_loss/add_1_grad/Reshape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss/dense_1_loss/sub_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/dense_1/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "dense_1/Sigmoid"
  input: "training/RMSprop/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/Sigmoid"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/dense_1/Sigmoid_grad/SigmoidGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/dense_1/Sigmoid_grad/SigmoidGrad"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "net/TensorArrayReadV3"
  input: "training/RMSprop/gradients/dense_1/Sigmoid_grad/SigmoidGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "net/TensorArray"
  input: "net/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArray"
        s: "loc:@net/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/RMSprop/gradients"
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "net/while/Exit_1"
  input: "^training/RMSprop/gradients/net/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArray"
        s: "loc:@net/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "training/RMSprop/gradients/net/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "net/sub_1"
  input: "training/RMSprop/gradients/dense_1/MatMul_grad/MatMul"
  input: "training/RMSprop/gradients/net/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/zeros_like"
  op: "ZerosLike"
  input: "net/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "training/RMSprop/gradients/net/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "training/RMSprop/gradients/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/Exit_1_grad/b_exit"
  input: "training/RMSprop/gradients/net/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/Exit_2_grad/b_exit"
  input: "training/RMSprop/gradients/net/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/Switch_1_grad/b_switch"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/Switch_2_grad/b_switch"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/Merge_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Enter_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Enter_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "training/RMSprop/gradients/net/while/Merge_1_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "training/RMSprop/gradients"
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "net/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "training/RMSprop/gradients/net/while/Merge_1_grad/Switch:1"
  input: "^training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Identity"
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Identity"
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "net/while/Identity"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_3_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_4_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^training/RMSprop/gradients/net/while/mul_7_grad/Mul/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/StackPopV2"
  input: "^training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_1"
  op: "AddN"
  input: "training/RMSprop/gradients/net/while/Merge_2_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/Shape"
  op: "Shape"
  input: "net/while/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "net/while/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/AddN_1"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Sum"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/AddN_1"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/add_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Shape"
  op: "Shape"
  input: "net/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Shape_1"
  op: "Shape"
  input: "net/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Identity_2"
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Identity_2"
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/Enter"
  input: "net/while/Identity_2"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Sum"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/Enter"
  input: "net/while/clip_by_value"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul_1"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_6_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Shape"
  op: "Shape"
  input: "net/while/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Shape_1"
  op: "Shape"
  input: "net/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/Enter"
  input: "net/while/add_4"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Sum"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/Enter"
  input: "net/while/sub"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Mul_1"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_7_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_7"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/Merge_1_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/Shape"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/Shape_1"
  op: "Shape"
  input: "net/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/sub_grad/Shape"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/sub_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/sub_grad/Sum"
  input: "training/RMSprop/gradients/net/while/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/Neg"
  op: "Neg"
  input: "training/RMSprop/gradients/net/while/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/sub_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/sub_grad/Neg"
  input: "training/RMSprop/gradients/net/while/sub_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/sub"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/Shape"
  op: "Shape"
  input: "net/while/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/Shape_1"
  op: "Shape"
  input: "net/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/add_4_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/net/while/add_4_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_4_grad/Sum"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_7_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_4_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/add_4_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_2"
  op: "AddN"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/sub_grad/Reshape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "net/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Shape_2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "net/while/clip_by_value/Minimum"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual"
  input: "training/RMSprop/gradients/AddN_2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/GreaterEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/zeros"
  input: "training/RMSprop/gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Select_1"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/net/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/add_4_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul/Enter"
  op: "Enter"
  input: "net/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_4_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/Enter"
  input: "net/while/mul_5"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "net/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Shape_2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "net/while/add_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/zeros"
  input: "training/RMSprop/gradients/net/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Select_1"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/add_4_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "net/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
        s: "loc:@net/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
        s: "loc:@net/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/Enter"
  input: "net/while/mul_2"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Shape"
  op: "Shape"
  input: "net/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Shape_1"
  op: "Shape"
  input: "net/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Mul"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Sum"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/StackPopV2"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/Enter"
  input: "net/while/clip_by_value_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Mul_1"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_5/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/Shape"
  op: "Shape"
  input: "net/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/add_1_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_1_grad/Sum"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_1_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 13
          }
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_8_grad/Shape"
  input: "net/strided_slice_8/stack"
  input: "net/strided_slice_8/stack_1"
  input: "net/strided_slice_8/stack_2"
  input: "training/RMSprop/gradients/net/while/BiasAdd_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "net/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Shape_2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "net/while/clip_by_value_1/Minimum"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/GreaterEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/zeros"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Select_1"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_5_grad/Shape"
  input: "net/strided_slice_5/stack"
  input: "net/strided_slice_5/stack_1"
  input: "net/strided_slice_5/stack_2"
  input: "training/RMSprop/gradients/net/while/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Shape"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "net/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Shape"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/add_1_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add"
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add"
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/Enter"
  input: "net/while/add"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Sum"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul_1/Const"
  input: "training/RMSprop/gradients/net/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Mul_1/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Mul_1"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\r\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_4_grad/Shape"
  input: "net/strided_slice_4/stack"
  input: "net/strided_slice_4/stack_1"
  input: "net/strided_slice_4/stack_2"
  input: "training/RMSprop/gradients/net/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "net/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "net/while/add_3"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual/Const_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/zeros"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Select"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_grad/Shape"
  op: "Shape"
  input: "net/while/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_grad/Shape_1"
  op: "Shape"
  input: "net/while/MatMul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/add_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/net/while/add_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_grad/Sum"
  input: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_3_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/add_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/Shape"
  op: "Shape"
  input: "net/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/Shape_1"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/add_3_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_3_grad/Sum"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_3_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/net/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/add_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "net/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Shape"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "net/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Shape"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/add_3_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/Enter"
  input: "net/while/add_2"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Sum"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul_1"
  op: "Mul"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul_1/Const"
  input: "training/RMSprop/gradients/net/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Mul_1/Const"
  op: "Const"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Mul_1"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/add_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "net/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
        s: "loc:@net/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
        s: "loc:@net/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/Enter"
  input: "net/while/mul"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/Shape"
  op: "Shape"
  input: "net/while/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/Shape_1"
  op: "Shape"
  input: "net/while/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/Enter"
  input: "training/RMSprop/gradients/net/while/add_2_grad/Shape"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/Enter_1"
  input: "training/RMSprop/gradients/net/while/add_2_grad/Shape_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/Sum"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_2_grad/Sum"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "training/RMSprop/gradients/net/while/mul_4_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "training/RMSprop/gradients/net/while/add_2_grad/Sum_1"
  input: "training/RMSprop/gradients/net/while/add_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/add_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 13
          }
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_6_grad/Shape"
  input: "net/strided_slice_6/stack"
  input: "net/strided_slice_6/stack_1"
  input: "net/strided_slice_6/stack_2"
  input: "training/RMSprop/gradients/net/while/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_1_grad/Shape"
  input: "net/strided_slice_1/stack"
  input: "net/strided_slice_1/stack_1"
  input: "net/strided_slice_1/stack_2"
  input: "training/RMSprop/gradients/net/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/RMSprop/gradients/net/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/add_2_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/MatMul_4_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4_grad/MatMul/Enter"
  op: "Enter"
  input: "net/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Mul/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\r\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_grad/Shape"
  input: "net/strided_slice/stack"
  input: "net/strided_slice/stack_1"
  input: "net/strided_slice/stack_2"
  input: "training/RMSprop/gradients/net/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/add_2_grad/Reshape"
  input: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "net/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/StackPopV2"
  input: "training/RMSprop/gradients/net/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
        s: "loc:@net/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
        s: "loc:@net/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/Enter"
  input: "net/while/mul_1"
  input: "^training/RMSprop/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/StackPopV2/Enter"
  input: "^training/RMSprop/gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/BiasAdd_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_3"
  op: "AddN"
  input: "training/RMSprop/gradients/net/while/mul_6_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/mul_5_grad/Reshape_1"
  input: "training/RMSprop/gradients/net/while/MatMul_3_grad/MatMul"
  input: "training/RMSprop/gradients/net/while/MatMul_4_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/mul_6"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/MatMul_4_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_4/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 13
          }
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "training/RMSprop/gradients/net/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/b_acc_1"
  input: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/b_acc_2"
  input: "training/RMSprop/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/Switch:1"
  input: "training/RMSprop/gradients/net/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 60
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_7_grad/Shape"
  input: "net/strided_slice_7/stack"
  input: "net/strided_slice_7/stack_1"
  input: "net/strided_slice_7/stack_2"
  input: "training/RMSprop/gradients/net/while/BiasAdd_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "training/RMSprop/gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/while/Merge_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_3_grad/Shape"
  input: "net/strided_slice_3/stack"
  input: "net/strided_slice_3/stack_1"
  input: "net/strided_slice_3/stack_2"
  input: "training/RMSprop/gradients/net/while/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\r\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/net/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_2_grad/Shape"
  input: "net/strided_slice_2/stack"
  input: "net/strided_slice_2/stack_1"
  input: "net/strided_slice_2/stack_2"
  input: "training/RMSprop/gradients/net/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_4"
  op: "AddN"
  input: "training/RMSprop/gradients/net/strided_slice_8_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_6_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_7_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_8"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_5"
  op: "AddN"
  input: "training/RMSprop/gradients/net/strided_slice_5_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_1_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_3_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_5"
      }
    }
  }
}
node {
  name: "training/RMSprop/gradients/AddN_6"
  op: "AddN"
  input: "training/RMSprop/gradients/net/strided_slice_4_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_grad/StridedSliceGrad"
  input: "training/RMSprop/gradients/net/strided_slice_2_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/strided_slice_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 13
          }
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 13
        }
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable"
  input: "training/RMSprop/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable/read"
  op: "Identity"
  input: "training/RMSprop/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000<\000\000\000"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_1"
  op: "Fill"
  input: "training/RMSprop/zeros_1/shape_as_tensor"
  input: "training/RMSprop/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/RMSprop/Variable_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable_1/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable_1"
  input: "training/RMSprop/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable_1/read"
  op: "Identity"
  input: "training/RMSprop/Variable_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_1"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 60
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Variable_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable_2/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable_2"
  input: "training/RMSprop/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable_2/read"
  op: "Identity"
  input: "training/RMSprop/Variable_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_2"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Variable_3"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable_3/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable_3"
  input: "training/RMSprop/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable_3/read"
  op: "Identity"
  input: "training/RMSprop/Variable_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_3"
      }
    }
  }
}
node {
  name: "training/RMSprop/zeros_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Variable_4"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "training/RMSprop/Variable_4/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable_4"
  input: "training/RMSprop/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/Variable_4/read"
  op: "Identity"
  input: "training/RMSprop/Variable_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_4"
      }
    }
  }
}
node {
  name: "training/RMSprop/AssignAdd/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/RMSprop/AssignAdd"
  op: "AssignAdd"
  input: "RMSprop/iterations"
  input: "training/RMSprop/AssignAdd/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "training/RMSprop/mul"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub"
  op: "Sub"
  input: "training/RMSprop/sub/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square"
  op: "Square"
  input: "training/RMSprop/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_1"
  op: "Mul"
  input: "training/RMSprop/sub"
  input: "training/RMSprop/Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add"
  op: "Add"
  input: "training/RMSprop/mul"
  input: "training/RMSprop/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign"
  op: "Assign"
  input: "training/RMSprop/Variable"
  input: "training/RMSprop/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_2"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add"
  input: "training/RMSprop/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value/Minimum"
  input: "training/RMSprop/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_1"
  op: "Add"
  input: "training/RMSprop/Sqrt"
  input: "training/RMSprop/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv"
  op: "RealDiv"
  input: "training/RMSprop/mul_2"
  input: "training/RMSprop/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_1"
  op: "Sub"
  input: "net/kernel/read"
  input: "training/RMSprop/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_1"
  op: "Assign"
  input: "net/kernel"
  input: "training/RMSprop/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_3"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub_2"
  op: "Sub"
  input: "training/RMSprop/sub_2/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square_1"
  op: "Square"
  input: "training/RMSprop/gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_4"
  op: "Mul"
  input: "training/RMSprop/sub_2"
  input: "training/RMSprop/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_2"
  op: "Add"
  input: "training/RMSprop/mul_3"
  input: "training/RMSprop/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_2"
  op: "Assign"
  input: "training/RMSprop/Variable_1"
  input: "training/RMSprop/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_5"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add_2"
  input: "training/RMSprop/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_1"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value_1/Minimum"
  input: "training/RMSprop/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt_1"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_3"
  op: "Add"
  input: "training/RMSprop/Sqrt_1"
  input: "training/RMSprop/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv_1"
  op: "RealDiv"
  input: "training/RMSprop/mul_5"
  input: "training/RMSprop/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_3"
  op: "Sub"
  input: "net/recurrent_kernel/read"
  input: "training/RMSprop/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_3"
  op: "Assign"
  input: "net/recurrent_kernel"
  input: "training/RMSprop/sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_6"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_4/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub_4"
  op: "Sub"
  input: "training/RMSprop/sub_4/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square_2"
  op: "Square"
  input: "training/RMSprop/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_7"
  op: "Mul"
  input: "training/RMSprop/sub_4"
  input: "training/RMSprop/Square_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_4"
  op: "Add"
  input: "training/RMSprop/mul_6"
  input: "training/RMSprop/mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_4"
  op: "Assign"
  input: "training/RMSprop/Variable_2"
  input: "training/RMSprop/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_8"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add_4"
  input: "training/RMSprop/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_2"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value_2/Minimum"
  input: "training/RMSprop/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt_2"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_5/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_5"
  op: "Add"
  input: "training/RMSprop/Sqrt_2"
  input: "training/RMSprop/add_5/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv_2"
  op: "RealDiv"
  input: "training/RMSprop/mul_8"
  input: "training/RMSprop/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_5"
  op: "Sub"
  input: "net/bias/read"
  input: "training/RMSprop/truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_5"
  op: "Assign"
  input: "net/bias"
  input: "training/RMSprop/sub_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@net/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_9"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_6/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub_6"
  op: "Sub"
  input: "training/RMSprop/sub_6/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square_3"
  op: "Square"
  input: "training/RMSprop/gradients/dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_10"
  op: "Mul"
  input: "training/RMSprop/sub_6"
  input: "training/RMSprop/Square_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_6"
  op: "Add"
  input: "training/RMSprop/mul_9"
  input: "training/RMSprop/mul_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_6"
  op: "Assign"
  input: "training/RMSprop/Variable_3"
  input: "training/RMSprop/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_11"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_3/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add_6"
  input: "training/RMSprop/Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_3"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value_3/Minimum"
  input: "training/RMSprop/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt_3"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_7"
  op: "Add"
  input: "training/RMSprop/Sqrt_3"
  input: "training/RMSprop/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv_3"
  op: "RealDiv"
  input: "training/RMSprop/mul_11"
  input: "training/RMSprop/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_7"
  op: "Sub"
  input: "dense_1/kernel/read"
  input: "training/RMSprop/truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_7"
  op: "Assign"
  input: "dense_1/kernel"
  input: "training/RMSprop/sub_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_12"
  op: "Mul"
  input: "RMSprop/rho/read"
  input: "training/RMSprop/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_8/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/RMSprop/sub_8"
  op: "Sub"
  input: "training/RMSprop/sub_8/x"
  input: "RMSprop/rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Square_4"
  op: "Square"
  input: "training/RMSprop/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/mul_13"
  op: "Mul"
  input: "training/RMSprop/sub_8"
  input: "training/RMSprop/Square_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_8"
  op: "Add"
  input: "training/RMSprop/mul_12"
  input: "training/RMSprop/mul_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_8"
  op: "Assign"
  input: "training/RMSprop/Variable_4"
  input: "training/RMSprop/add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/RMSprop/mul_14"
  op: "Mul"
  input: "RMSprop/lr/read"
  input: "training/RMSprop/gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/RMSprop/Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_4/Minimum"
  op: "Minimum"
  input: "training/RMSprop/add_8"
  input: "training/RMSprop/Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/clip_by_value_4"
  op: "Maximum"
  input: "training/RMSprop/clip_by_value_4/Minimum"
  input: "training/RMSprop/Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Sqrt_4"
  op: "Sqrt"
  input: "training/RMSprop/clip_by_value_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1e-07
      }
    }
  }
}
node {
  name: "training/RMSprop/add_9"
  op: "Add"
  input: "training/RMSprop/Sqrt_4"
  input: "training/RMSprop/add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/truediv_4"
  op: "RealDiv"
  input: "training/RMSprop/mul_14"
  input: "training/RMSprop/add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/sub_9"
  op: "Sub"
  input: "dense_1/bias/read"
  input: "training/RMSprop/truediv_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/RMSprop/Assign_9"
  op: "Assign"
  input: "dense_1/bias"
  input: "training/RMSprop/sub_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^loss/mul"
  input: "^metrics/acc/Mean_1"
  input: "^training/RMSprop/Assign"
  input: "^training/RMSprop/AssignAdd"
  input: "^training/RMSprop/Assign_1"
  input: "^training/RMSprop/Assign_2"
  input: "^training/RMSprop/Assign_3"
  input: "^training/RMSprop/Assign_4"
  input: "^training/RMSprop/Assign_5"
  input: "^training/RMSprop/Assign_6"
  input: "^training/RMSprop/Assign_7"
  input: "^training/RMSprop/Assign_8"
  input: "^training/RMSprop/Assign_9"
}
node {
  name: "IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "RMSprop/lr"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/lr"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "RMSprop/rho"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/rho"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "RMSprop/decay"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/decay"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "RMSprop/iterations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@RMSprop/iterations"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "training/RMSprop/Variable_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^RMSprop/decay/Assign"
  input: "^RMSprop/iterations/Assign"
  input: "^RMSprop/lr/Assign"
  input: "^RMSprop/rho/Assign"
  input: "^training/RMSprop/Variable/Assign"
  input: "^training/RMSprop/Variable_1/Assign"
  input: "^training/RMSprop/Variable_2/Assign"
  input: "^training/RMSprop/Variable_3/Assign"
  input: "^training/RMSprop/Variable_4/Assign"
}
node {
  name: "Placeholder_5"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 13
        }
        dim {
          size: 60
        }
      }
    }
  }
}
node {
  name: "Assign_5"
  op: "Assign"
  input: "training/RMSprop/Variable"
  input: "Placeholder_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_6"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 60
        }
      }
    }
  }
}
node {
  name: "Assign_6"
  op: "Assign"
  input: "training/RMSprop/Variable_1"
  input: "Placeholder_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_7"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 60
        }
      }
    }
  }
}
node {
  name: "Assign_7"
  op: "Assign"
  input: "training/RMSprop/Variable_2"
  input: "Placeholder_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_8"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_8"
  op: "Assign"
  input: "training/RMSprop/Variable_3"
  input: "Placeholder_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_9"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Assign_9"
  op: "Assign"
  input: "training/RMSprop/Variable_4"
  input: "Placeholder_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/RMSprop/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "net_output"
  op: "Identity"
  input: "dense_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 27
}
